package pl.edu.pb.wi.grafika.utils;

import pl.edu.pb.wi.grafika.DataStorage.Storage;

import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;

public class P3 extends PPM {

    /**
     * @param file - file selected by user
     * @return BufferedImage image read from P3 format using recursive methods
     * @throws IOException trowed on file or read error
     * @author Daniel Demczuk
     * Works only when single value is placed in each line. (ppms generated by GIMP works that way)
     */
    public static BufferedImage loadRecursive(File file) throws Exception {
        int columns = 0;
        int rows = 0;
        int maxSize = 255;

        if(!file.exists()) return null;

        BufferedReader reader = new BufferedReader(new FileReader(file));

        nextIgnoreComments(reader);

        String[] line = Objects.requireNonNull(nextIgnoreComments(reader)).trim().split(" ");
        columns = Integer.parseInt(line[0]);
        rows = Integer.parseInt(line[1]);

        maxSize = nextInt(reader);

        BufferedImage image = new BufferedImage(columns, rows, BufferedImage.TYPE_INT_RGB);

        int posX = 0, posY = 0;
        while(true){

            int r = nextInt(reader);
            if(r == -1){
                break;
            }
            int g = nextInt(reader);
            int b = nextInt(reader);

            try {
                image.setRGB(posX, posY, ColorUtil.convertColor(r,g,b,maxSize).getRGB());
            } catch (Exception e) {
                Storage.setErrorMessage(e.toString());
                return null;
            }

            if(posX < columns - 1) posX++;
            else {
                posX = 0;
                posY++;
            }
        }

        return image;
    }

    /**
     * @param file - file selected by user
     * @return BufferedImage image read from P3 format using buffer of ints
     * @throws IOException trowed on file or read error
     * @author Daniel Demczuk
     * Method works even when multiple values are placed in one row.
     */
    public static BufferedImage load(File file) throws Exception {
         int columns = 0;
         int rows = 0;
         int maxSize = 255;

         if(!file.exists()){
             Storage.setErrorMessage("File doesn't exist!");
             return null;
         }

         BufferedReader reader = new BufferedReader(new FileReader(file));

//         Ignore file format tag and exit method if format is somehow wrong
         if(!Objects.equals(nextIgnoreComments(reader), "P3")){
             Storage.setErrorMessage("Invalid PPM format!");
             return null;
         };

         ArrayList<Integer> buffer = new ArrayList<>();

         String[] buff = Objects.requireNonNull(nextIgnoreComments(reader)).split(" ");

         columns = Integer.parseInt(buff[0]);
         rows = Integer.parseInt(buff[1]);
         maxSize = Integer.parseInt(Objects.requireNonNull(nextIgnoreComments(reader)));

         BufferedImage image = new BufferedImage(columns, rows, BufferedImage.TYPE_INT_RGB);

         int posX = 0, posY = 0;
         while(true){

             if(buffer.size() == 0){
                 getBufferFromReader(reader, buffer);
             }

             int r = getNext(buffer);
             if(r == -1){
                 break;
             }
             int g = getNext(buffer);
             int b = getNext(buffer);

             try {
                 image.setRGB(posX, posY, ColorUtil.convertColor(r,g,b,maxSize).getRGB());
             } catch (Exception e) {
                 Storage.setErrorMessage(e.toString());
                 return null;
             }

             if(posX < columns - 1) posX++;
             else {
                 posX = 0;
                 posY++;
             }
         }

         return image;
    }

}

package pl.edu.pb.wi.grafika.utils;

import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.Objects;

public class P3 extends PPM {

    /**
     * @param file - file selected by user
     * @return BufferedImage image read from P3 format using recursive methods
     * @throws IOException trowed on file or read error
     * @author Daniel Demczuk
     * Method much faster than load(). Works only when single value is placed in each line.
     * (ppms generated by GIMP works that way)
     */
    public static BufferedImage loadRecursive(File file) throws IOException {
        int columns = 0;
        int rows = 0;
        int maxSize = 255;

        if(!file.exists()) return null;

        BufferedReader reader = new BufferedReader(new FileReader(file));

        nextIgnoreComments(reader);

        String[] line = Objects.requireNonNull(nextIgnoreComments(reader)).trim().split(" ");
        columns = Integer.parseInt(line[0]);
        rows = Integer.parseInt(line[1]);

        maxSize = nextInt(reader);

        BufferedImage image = new BufferedImage(columns, rows, BufferedImage.TYPE_INT_RGB);

        int posX = 0, posY = 0;
        while(true){

            int r = nextInt(reader);
            if(r == -1){
                break;
            }
            int g = nextInt(reader);
            int b = nextInt(reader);

            image.setRGB(posX, posY, ColorUtil.convertColor(r,g,b,maxSize).getRGB());

            if(posX < columns - 1) posX++;
            else {
                posX = 0;
                posY++;
            }
        }

        return image;
    }

    /**
     * @param file - file selected by user
     * @return BufferedImage image read from P3 format using buffer of ints
     * @throws IOException trowed on file or read error
     * @author Daniel Demczuk
     * Method slower than loadRecursive(). Method works even when multiple values are placed in one row.
     */
    public static BufferedImage load(File file) throws IOException {
         int columns = 0;
         int rows = 0;
         int maxSize = 255;

         if(!file.exists()) return null;

         BufferedReader reader = new BufferedReader(new FileReader(file));
         reader.readLine();

         ArrayList<Integer> buffer = getInts(reader);

         columns = getNext(buffer);
         rows = getNext(buffer);
         maxSize = getNext(buffer);

         BufferedImage image = new BufferedImage(columns, rows, BufferedImage.TYPE_INT_RGB);

         int posX = 0, posY = 0;
         while(true){

             int r = getNext(buffer);
             if(r == -1){
                 break;
             }
             int g = getNext(buffer);
             int b = getNext(buffer);

             image.setRGB(posX, posY, ColorUtil.convertColor(r,g,b,maxSize).getRGB());

             if(posX < columns - 1) posX++;
             else {
                 posX = 0;
                 posY++;
             }
         }

         return image;
    }

}
